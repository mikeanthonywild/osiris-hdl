/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "platform.h"
#include "buf_controller.h"
#include "interrupt.h"
#include "xil_printf.h"

#include "xscugic.h"
#include "xil_exception.h"
#include "xscutimer.h"

#define TIMER_INIT_CNT 66666667

// Interrupt controller
static XScuGic int_ctl;
static XScuGic_Config *int_ctl_cfg;

// SCU timer (internal)
static XScuTimer prv_timer;	// Private timer instance
static XScuTimer_Config *prv_timer_cfg;

// Interrupt synchronisation
static volatile int ISR_toggle = 0, ISR_count = 0;
// Button interrupt handler
static void ButtonHandler(void *callback_ref) {
	XScuTimer *timer = (XScuTimer *) callback_ref;

	xil_printf("BUTTON PRESSED!!!!\n");
	XScuTimer_RestartTimer(timer);
	XScuTimer_Start(timer);
}


int main()
{
    init_platform();

    Xil_ExceptionInit(); // Only needed for Microblaze + PPC?
    int status;
	// Init GIC
	int_ctl_cfg = XScuGic_LookupConfig(XPAR_SCUGIC_0_DEVICE_ID);
	status = XScuGic_CfgInitialize(&int_ctl, int_ctl_cfg, int_ctl_cfg->CpuBaseAddress);
	if (status != XST_SUCCESS) {
		xil_printf("SCUGIC init failed");
		return status;
	}

	// Connect interrupt controller hardware driver
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler) XScuGic_InterruptHandler, &int_ctl);
	XScuGic_Connect(&int_ctl, XPAR_SCUTIMER_INTR, (Xil_ExceptionHandler) TimerIntrHandler, (void *) &prv_timer);
	XScuGic_Enable(&int_ctl, XPAR_SCUTIMER_INTR);
	XScuGic_Connect(&int_ctl, 61, (Xil_ExceptionHandler) ButtonHandler, (void *) &prv_timer);
	XScuGic_SetPriorityTriggerType(&int_ctl, 61, 0, 3);
	XScuGic_Enable(&int_ctl, 61);

	// Init and configure timer
	prv_timer_cfg = XScuTimer_LookupConfig(XPAR_XSCUTIMER_0_DEVICE_ID);
	XScuTimer_CfgInitialize(&prv_timer, prv_timer_cfg, prv_timer_cfg->BaseAddr);
	//XScuTimer_EnableAutoReload(&prv_timer);
	XScuTimer_LoadTimer(&prv_timer, TIMER_INIT_CNT);
	XScuTimer_EnableInterrupt(&prv_timer);
	//XScuTimer_Start(&prv_timer);

	Xil_ExceptionEnable();

	xil_printf("Hello World\n\r");

	while(1) {
		;
	}



    /*
    init_interrupts();
    init_buf_controller();

    enable_interrupts();

    xil_printf("Hello World\n\r");

    while (1) {
    	update_buf_controller();
    }
    */

    cleanup_platform();
    return 0;
}
